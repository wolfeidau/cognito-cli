// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wolfeidau/cognito-cli/pkg/cognito (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cognito "github.com/wolfeidau/cognito-cli/pkg/cognito"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ListPools mocks base method
func (m *MockService) ListPools(arg0 cognito.UserPoolsPageFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPools indicates an expected call of ListPools
func (mr *MockServiceMockRecorder) ListPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockService)(nil).ListPools), arg0)
}

// ListUsers mocks base method
func (m *MockService) ListUsers(arg0 string, arg1 cognito.UsersPageFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockServiceMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockService)(nil).ListUsers), arg0, arg1)
}
